name: Build Pulsar
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 22 * * 5'  # 10pm UTC on Friday (5/6pm EDT) - after upstream builds and before auto-updates at 4am Saturday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:
    inputs:
      # Run with this periodically to analyze the image again
      # As package drift will make the plan eventually non-ideal
      # (existing users will have to redownload most of the image)
      fresh-rechunk:
        description: 'Clear rechunk history'
        type: boolean
        default: false

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  BASE_IMAGE_REGISTRY: "ghcr.io/ublue-os"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_flavor: [main, deck, cli, cli-nvidia]
        major_version: [42]
          
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install Just
        uses: ./.github/actions/install-just
        
      - name: Matrix Variables
        shell: bash
        run: |
          IMAGE_FLAVOR="${{ matrix.image_flavor }}"
          IMAGE_NAME="$(just get-image-name $IMAGE_FLAVOR)"
          MAJOR_VERSION="${{ matrix.major_version }}"
          BASE_IMAGE="$(just get-base-image $IMAGE_FLAVOR)"
          FRESH_RECHUNK="${{ github.event.inputs.fresh-rechunk }}"

          echo "IMAGE_FLAVOR=${IMAGE_FLAVOR}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "MAJOR_VERSION=${MAJOR_VERSION}" >> $GITHUB_ENV
          echo "BASE_IMAGE=${BASE_IMAGE}" >> $GITHUB_ENV
          echo "FRESH_RECHUNK=${FRESH_RECHUNK}" >> $GITHUB_ENV
          
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v8
      
      - name: Build Image
        shell: bash
        run: |
          sudo just build ${{ env.IMAGE_FLAVOR }}

      - name: Rechunk Image
        shell: bash
        run: |
          sudo just rechunk ${{ env.IMAGE_FLAVOR }} ${{ env.FRESH_RECHUNK }}

      - name: Load and Tag Image
        shell: bash
        run: |
          just _load_image ${{ env.IMAGE_FLAVOR }}

      - name: Get Tags
        id: get_tags
        shell: bash
        run: |
          tags=$(just get-tags ${{ env.IMAGE_FLAVOR }})
          echo "tags=$tags" >> $GITHUB_OUTPUT

      - name: Remove auxiliary images
        run: |
          sudo podman rmi --all

      # - name: Check Secureboot
      #   shell: bash
      #   run: |
      #     set -x
      #     if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
      #       sudo apt update
      #       sudo apt install sbsigntool curl openssl
      #     fi
      #     TMP=$(podman create rechunked-img bash)
      #     podman cp "$TMP:/usr/lib/modules/${{ env.KERNEL_VERSION }}/vmlinuz" .
      #     podman rm $TMP
      #     sbverify --list vmlinuz
      #     curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
      #     curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
      #     openssl x509 -in kernel-sign.der -out kernel-sign.crt
      #     openssl x509 -in akmods.der -out akmods.crt
      #     sbverify --cert kernel-sign.crt vmlinuz || exit 1
      #     sbverify --cert akmods.crt vmlinuz || exit 1
  
      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.5.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ env.IMAGE_NAME }}
            tags: ${{ steps.get_tags.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}

      - name: Sign container image
        uses: EyeCantCU/cosign-action/sign@v0.3.0
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          containers: ${{ env.IMAGE_NAME }}
          registry-token: ${{ secrets.GITHUB_TOKEN }}
          signing-secret: ${{ secrets.SIGNING_SECRET }}
          tags: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  workflow-keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1