name: build-ublue-custom
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 22 * * 5'  # 10pm UTC on Friday (5/6pm EDT) - after upstream builds and before auto-updates at 4am Saturday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:
    inputs:
      # Run with this periodically to analyze the image again
      # As package drift will make the plan eventually non-ideal
      # (existing users will have to redownload most of the image)
      fresh-rechunk:
        description: 'Clear rechunk history'
        type: boolean
        default: false

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  BASE_IMAGE_REGISTRY: "ghcr.io/ublue-os"

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name: [base, kinoite]
        image_suffix: [main]
        major_version: [41]
        include:
          - image_name: base
            image_suffix: nvidia
            major_version: 41
          - image_name: bazzite
            image_suffix: deck
            major_version: 41
            kernel_flavor: bazzite
            kernel_version: 6.11.6-302.bazzite.fc41.x86_64
          - image_name: bazzite
            image_suffix: main
            major_version: 41
            kernel_flavor: bazzite
            kernel_version: 6.11.6-302.bazzite.fc41.x86_64
          
    steps:
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v7
        
      - name: Checkout
        uses: actions/checkout@v4

      - name: Matrix Variables
        shell: bash
        run: |
          if [[ "${{ matrix.image_name }}" == "bazzite" && "${{ matrix.image_suffix }}" == "main" ]]; then
            IMAGE_SUFFIX=
          else
            IMAGE_SUFFIX=${{ matrix.image_suffix }}
          fi
          echo "IMAGE_NAME=${{ matrix.image_name }}" >> $GITHUB_ENV
          echo "IMAGE_SUFFIX=${IMAGE_SUFFIX}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${{ matrix.image_name }}${IMAGE_SUFFIX:+-$IMAGE_SUFFIX}" >> $GITHUB_ENV
          echo "FEDORA_MAJOR_VERSION=${{ matrix.major_version }}" >> $GITHUB_ENV
          echo "KERNEL_FLAVOR=${{ matrix.kernel_flavor }}" >> $GITHUB_ENV
          echo "KERNEL_VERSION=${{ matrix.kernel_version }}" >> $GITHUB_ENV
          if [[ "${{ matrix.kernel_flavor }}" != "" && "${{ matrix.kernel_version }}" != "" ]]; then
            echo "BUILD_TARGET=customkernel" >> $GITHUB_ENV
          else
            echo "BUILD_TARGET=default" >> $GITHUB_ENV
          fi

      - name: Pull main, rechunk images
        uses: Wandalen/wretry.action@v3.5.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base images used for FROM in Containerfile so
            # we can retry on that unfortunately common failure case
            sudo podman pull ${{ env.BASE_IMAGE_REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:${{ env.FEDORA_MAJOR_VERSION }}

            # Add rechunk as well to remove this source of failure
            sudo podman pull ghcr.io/hhd-dev/rechunk:v0.8.3

            # Also pull custom kernel if one is specified            
            if [[ "${{ env.BUILD_TARGET }}" == "customkernel" ]]; then
              sudo podman pull ghcr.io/ublue-os/${{ env.KERNEL_FLAVOR }}-kernel:${{ env.FEDORA_MAJOR_VERSION}}-${{ env.KERNEL_VERSION }}
            fi

      - name: Get source versions
        id: labels
        uses: Wandalen/wretry.action@v3.5.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            sudo skopeo inspect containers-storage:${{ env.BASE_IMAGE_REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:${{ env.FEDORA_MAJOR_VERSION }} > source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

            if [[ "${{ env.BUILD_TARGET }}" == "default" ]]; then
              kver=$(jq -r '.Labels["ostree.linux"]' source.json)
              if [ -z "$kver" ] || [ "null" = "$kver" ]; then
                echo "inspected image kernel version must not be empty or null"
                exit 1
              fi
              echo "KERNEL_VERSION=$kver" >> $GITHUB_ENV
            fi

      # Build image using buildah and save it to raw-img
      - name: Build Image
        id: build_image
        run: |
          sudo buildah build \
            --target ${{ env.BUILD_TARGET }} \
            --build-arg IMAGE_NAME=${{ env.IMAGE_NAME }} \
            --build-arg IMAGE_SUFFIX=${{ env.IMAGE_SUFFIX }} \
            --build-arg FEDORA_MAJOR_VERSION=${{ env.FEDORA_MAJOR_VERSION }} \
            --build-arg KERNEL_FLAVOR=${{ env.KERNEL_FLAVOR }} \
            --build-arg KERNEL_VERSION=${{ env.KERNEL_VERSION }} \
            --tag raw-img .

      - name: Remove auxiliary images
        # We are tight on space, need at least 2x for OSTree
        run: |
          sudo podman image rm ${{ env.BASE_IMAGE_REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:${{ env.FEDORA_MAJOR_VERSION }}

      # Generate the previous image reference used by the Rechunker
      - name: Generate previous reference
        id: generate-prev-ref
        shell: bash
        run: |
          if [ "${{ github.event.inputs.fresh-rechunk }}" == "true" ]; then
            IMAGEREF=""
          else
            IMAGEREF="${{ env.IMAGE_REGISTRY }}/${{ env.FULL_IMAGE_NAME }}:latest"
          fi

          echo "ref=${IMAGEREF}" >> $GITHUB_OUTPUT

          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      # Reprocess raw-img using rechunker which will delete it
      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v0.8.6
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v0.8.6'
          ref: 'raw-img'
          prev-ref: '${{ steps.generate-prev-ref.outputs.ref }}'
          version: '${{ env.SOURCE_IMAGE_VERSION }}'
          labels: |
            org.opencontainers.image.created=<timestamp>
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Customized ${{ env.FULL_IMAGE_NAME }}
            org.universal-blue.pkg.kernel=<relver:kernel>

      # Generate tags after rechunker runs and checks the primary tag is not duplicated
      # If it is, rechunk will suffix it by .1, .2, etc and put it in steps.rechunk.outputs.version
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VERSION_TAG="${{ steps.rechunk.outputs.version }}"
          VERSION="${{ env.FEDORA_MAJOR_VERSION }}"

          COMMIT_TAGS=()
          BUILD_TAGS=( "${VERSION_TAG}" )

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VERSION}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VERSION}")

          BUILD_TAGS=("${VERSION}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Pull oci-dir image, remove oci dir to make space, and then tag appropriately
      - name: Load in podman and tag
        run: |
          IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.output }}
          for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
            podman tag $IMAGE ${{ env.FULL_IMAGE_NAME }}:$tag
          done
          # keep for secureboot check
          podman tag $IMAGE rechunked-img

      - name: Check Secureboot
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          TMP=$(podman create rechunked-img bash)
          podman cp "$TMP:/usr/lib/modules/${{ env.KERNEL_VERSION }}/vmlinuz" .
          podman rm $TMP
          sbverify --list vmlinuz
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1
  
      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.5.0
        id: push
        if: github.event_name != 'pull_request'
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ env.FULL_IMAGE_NAME }}
            tags: ${{ steps.generate-tags.outputs.alias_tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}

      - name: Sign container image
        uses: EyeCantCU/cosign-action/sign@v0.3.0
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          containers: ${{ env.FULL_IMAGE_NAME }}
          registry-token: ${{ secrets.GITHUB_TOKEN }}
          signing-secret: ${{ secrets.SIGNING_SECRET }}
          tags: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  workflow-keepalive:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1